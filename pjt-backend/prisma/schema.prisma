generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid())
  email       String @unique
  password    String
  name        String?
  businessName String?
  phone       String?
  avatar      String?
  role        String @default("ADMIN")
  isSuperAdmin Boolean @default(false)
  branches    Branch[]
  services    Service[]
  createdAt   DateTime @default(now())
}

model Branch {
  id          String @id @default(uuid())
  name        String
  address     String?
  phone       String?
  logo        String?
  isActive    Boolean @default(true)
  ownerId     String
  owner       User   @relation(fields: [ownerId], references: [id])
  
  professionals Professional[]
  services      Service[]
  clients       Client[]
  appointments  Appointment[]
  products      Product[]
  stockMovements StockMovement[]
  expenseCategories ExpenseCategory[]
  financialTransactions FinancialTransaction[]
  
  createdAt   DateTime @default(now())
}

model Professional {
  id               String        @id @default(uuid())
  name             String
  role             String
  active           Boolean       @default(true)
  commissionRate   Decimal       @default(0) @db.Decimal(5, 2)
  branchId         String
  branch           Branch        @relation(fields: [branchId], references: [id])
  services         Service[]     @relation("ProfessionalServices")
  appointments     Appointment[]
}

model Service {
  id                  String               @id @default(uuid())
  name                String
  price               Decimal              @db.Decimal(10, 2)
  branchId            String?
  branch              Branch?              @relation(fields: [branchId], references: [id])
  ownerId             String               // Dono do serviço
  owner               User                 @relation(fields: [ownerId], references: [id])
  professionals       Professional[]       @relation("ProfessionalServices")
  appointmentServices AppointmentService[]
}

model Client {
  id           String        @id @default(uuid())
  name         String
  phone        String?
  email        String?
  branchId     String
  branch       Branch        @relation(fields: [branchId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Appointment {
  id                  String               @id @default(uuid())
  professional        Professional         @relation(fields: [professionalId], references: [id])
  professionalId      String
  client              Client               @relation(fields: [clientId], references: [id])
  clientId            String
  branchId            String
  branch              Branch               @relation(fields: [branchId], references: [id])
  appointmentServices AppointmentService[]
  total               Decimal              @db.Decimal(10, 2)
  scheduledAt         DateTime
  status              AppointmentStatus    @default(SCHEDULED)
  createdAt           DateTime             @default(now())
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model AppointmentService {
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  service       Service     @relation(fields: [serviceId], references: [id])
  serviceId     String

  @@id([appointmentId, serviceId])
}

model Product {
  id            String          @id @default(uuid())
  name          String
  sku           String?
  description   String?
  category      String
  brand         String?
  barcode       String?         @unique
  costPrice     Decimal         @db.Decimal(10, 2)
  salePrice     Decimal?        @db.Decimal(10, 2)
  currentStock  Int             @default(0)
  minStock      Int             @default(0)
  maxStock      Int?
  unit          String          @default("un") // un, kg, l, ml, etc
  isActive      Boolean         @default(true)
  branchId      String
  branch        Branch          @relation(fields: [branchId], references: [id])
  stockMovements StockMovement[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model StockMovement {
  id          String            @id @default(uuid())
  productId   String
  product     Product           @relation(fields: [productId], references: [id])
  branchId    String
  branch      Branch            @relation(fields: [branchId], references: [id])
  type        StockMovementType
  quantity    Int
  unitCost    Decimal?          @db.Decimal(10, 2)
  totalCost   Decimal?          @db.Decimal(10, 2)
  reason      String?
  reference   String?           // Nota fiscal, pedido, etc
  createdAt   DateTime          @default(now())
}

enum StockMovementType {
  IN          // Entrada
  OUT         // Saída
  ADJUSTMENT  // Ajuste
  LOSS        // Perda
}

model ExpenseCategory {
  id          String                 @id @default(uuid())
  name        String
  type        FinancialTransactionType
  color       String                 @default("#6B7280")
  description String?
  branchId    String
  branch      Branch                 @relation(fields: [branchId], references: [id])
  transactions FinancialTransaction[]
  createdAt   DateTime               @default(now())
}

model FinancialTransaction {
  id            String                 @id @default(uuid())
  description   String
  amount        Decimal                @db.Decimal(10, 2)
  type          FinancialTransactionType
  categoryId    String
  category      ExpenseCategory        @relation(fields: [categoryId], references: [id])
  paymentMethod PaymentMethod          @default(CASH)
  reference     String?                // Número da nota, comprovante, etc
  date          DateTime               @default(now())
  branchId      String
  branch        Branch                 @relation(fields: [branchId], references: [id])
  createdAt     DateTime               @default(now())
}

enum FinancialTransactionType {
  INCOME      // Receita
  EXPENSE     // Despesa
  INVESTMENT  // Investimento
}

enum PaymentMethod {
  CASH        // Dinheiro
  CARD        // Cartão
  PIX         // PIX
  TRANSFER    // Transferência
  OTHER       // Outros
}
